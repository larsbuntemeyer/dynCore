      SUBROUTINE FINAL(
     &    AK     , BK    , DAK    , DBK  ,    
     &    DWDT   , PINT  , W      , T      , QD     , QW   , PS    ,
     &    DIFW   , DIFD  , QI     )

      INCLUDE "phykon.h"
      INCLUDE "higkon.h"
      INCLUDE "org.h"
      INCLUDE "parorg.h"
      INCLUDE "comdyn.h"

      REAL, INTENT(IN)    ::
     &         QD(IE,JE,KE,3) ,
     &         QW(IE,JE,KE,3) ,
     &         QI(IE,JE,KE,3) ,
     &         PS(IE,JE,3), 
     &         DIFD(IE,JE,KE),
     &         DIFW(IE,JE,KE)

      REAL, INTENT(IN)    ::
     &         AK  (KE1)  , BK  (KE1)  , AKH  (KE)   , BKH  (KE)   ,
     &         DAK (KE)   , DBK (KE) 

      REAL, INTENT(INOUT) :: DWDT(IE,JE,KE,3)
      REAL, INTENT(INOUT) :: T(IE,JE,KE,3)
      REAL, INTENT(INOUT) :: PINT(IE,JE,KE1,3)
      REAL, INTENT(INOUT) :: W(IE,JE,KE1,3)

      REAL, PARAMETER :: EPS   = 1.
      REAL, PARAMETER :: WP    = 0.05
      REAL, PARAMETER :: WP1   = 1. - WP
      REAL, PARAMETER :: WA    = 0.05

      INTEGER :: I, J, K
      INTEGER :: KM1, KP1
      INTEGER :: N, NSUB_STEP
      INTEGER :: IAH_T, IEH_T
      REAL    :: CAPPA, GDT, GDT2, FCC, WGHT
      REAL    :: DPTL, DPTU, DELP, DPSTR, SUB_DT
      REAL    :: PP1, RDPLDN, RDPLUP
      REAL    :: TFAC1(KE), TFAC2(KE), TTFC(KE)
      REAL    :: PDR(KE,IE), TEMP(KE,IE), PRES(KE1,IE), RTOP(KE,IE)
      REAL    :: WDOT(KE,IE), WVEL(KE1,IE), WRK(KE,IE)
      REAL ::
     &         B1(KE)   , B2(KE)   , B3(KE)   , C0(KE)    ,
     &         PONE(KE1), PSTR(KE1), PNP1(KE1), COFF(KE1) ,
     &         CHI(KE1)

      REAL ::  P1(KE1,IE)

C-----------------------------------------------------------------------

      SUB_DT = 1.
      CAPPA = R/WCP
C     GDT   = G*DT2
      GDT   = G*2.*SUB_DT
      GDT2  = GDT*GDT
      FCC   = -R/GDT2
      WGHT  = CAPPA

      IF( NEIGHBOR(1) == -1 ) THEN
        IAH_T = IAH - 1
      ELSE
        IAH_T = IAH
      ENDIF
      IF( NEIGHBOR(3) == -1 ) THEN
        IEH_T = IEH + 1
      ELSE
        IEH_T = IEH
      ENDIF

CHG   SICHERHEITSABFANG
      DO K = 1 , KE
        DO J = JAH , JEH
          DO I = IAH, IEH
C         DO I = IAH_T, IEH_T
            DWDT(I,J,K,NE) = DWDT(I,J,K,NE) 
     &                     + WA*(DIFD(I,J,K) + DIFW(I,J,K))
            DWDT(I,J,K,NE) = MAX( DWDT(I,J,K,NE),-EPS )
            DWDT(I,J,K,NE) = MIN( DWDT(I,J,K,NE), EPS )
            DWDT(I,J,K,NE) = (1. + DWDT(I,J,K,NE)/G)*WP1
     &                       + DWDT(I,J,K,NA)*WP
          END DO
        END DO
      END DO

      NSUB_STEP = NINT( DT/SUB_DT )

      J_LOOP : DO J = JAH , JEH
C-----------------------------------------------------------------------
C     setup working variables
C-----------------------------------------------------------------------
        DO I = IAH , IEH
          PDP = PS(I,J,NE)
          PDR(:,I) = DAK(:) + DBK(:)*PDP
          TFAC1(:) = 1. + 0.608*QD(I,J,:,NE)
     &                  - (QW(I,J,:,NE) + QI(I,J,:,NE))
          TTFC(:)  = 1. - CAPPA*TFAC1(:)
          TFAC2(:) = 1. + 0.608*QD(I,J,:,NA)
     &                 - (QW(I,J,:,NA) + QI(I,J,:,NA))
          RTOP(:,I) = T(I,J,:,NA)*TFAC2(:)*CAPPA
     &                /(PINT(I,J,1:KE,NA) + PINT(I,J,2:KE1,NA))
          TEMP(:,I) = T(I,J,:,NE)
          PRES(:,I) = PINT(I,J,:,NE)
          WDOT(:,I) = DWDT(I,J,:,NE)
          WVEL(:,I) = W(I,J,:,NE)
          WRK(:,I)  = TFAC1(:)*TTFC(:)*PDR(:,I)*FCC
        END DO

      TIME_LOOP : DO N = 1,NSUB_STEP
        I_LOOP : DO I = IAH , IEH
          CHI(1)  = 0.
          PONE(1) = AK(1) + BK(1)*PDP
          PSTR(1) = PONE(1)
          PNP1(1) = PONE(1)
          P1(1,I) = PONE(1)

          P1(2:KE1,I) = PRES(2:KE1,I)
          PONE(2:KE1) = PRES(2:KE1,I)
          DO K = 2 , KE1
            KM1 = K - 1
            DPSTR   = WDOT(KM1,I)*PDR(KM1,I)
            PSTR(K) = PSTR(KM1) + DPSTR
            PP1     = PNP1(KM1) + DPSTR
            DP      = (PP1 - PONE(K))*WGHT
            PNP1(K) = PONE(K) + DP
          END DO

          COFF(1:KE) = TEMP(:,I)*WRK(:,I)
     &                 /((PNP1(1:KE) + PNP1(2:KE1)))**2

          DO K = 2 , KE
            KM1 = K - 1
            KP1 = K + 1
            RDPLDN = 1./PDR(K,I)
            RDPLUP = 1./PDR(KM1,I)

            B1(K) = COFF(KM1)*0.5 + RDPLUP
            B2(K) = (COFF(KM1) + COFF(K))*0.5 - (RDPLUP + RDPLDN)
            B3(K) = COFF(K)*0.5 + RDPLDN

            C0(K) = -((PSTR(KM1)+PSTR(K)-(PONE(KM1)+PONE(K)))*COFF(KM1)
     &        + (PSTR(K)+PSTR(KP1) - (PONE(K)+PONE(KP1)))*COFF(K))*0.5
          END DO

          B2(KE) = B2(KE) + B3(KE)

          DO K = 3 , KE
            KM1 = K - 1
            TMP   = -B1(K)/B2(KM1)
            B2(K) = B3(KM1)*TMP + B2(K)
            C0(K) = C0(KM1)*TMP + C0(K)
          END DO

          CHI(KE)  = C0(KE)/B2(KE)
          CHI(KE1) = CHI(KE)

          DO K = KE-1 , 2 , -1
            CHI(K) = (-B3(K)*CHI(K+1) + C0(K))/B2(K)
          END DO

          PNP1(1:KE1)   = CHI(1:KE1) + PSTR(1:KE1)
          PRES(1:KE1,I) = PNP1(1:KE1)
        END DO I_LOOP

C----------BACKSUBSTITUTION---------------------------------------------
        DO I = IAH , IEH
          DPTU = 0.
          DO K = 1 , KE
            KP1  = K + 1
            DPTL = PRES(KP1,I) - P1(KP1,I)
            TEMP(K,I) = TEMP(K,I) + (DPTU + DPTL)*RTOP(K,I)
            DELP      = (PRES(KP1,I) - PRES(K,I))/PDR(K,I)
            WVEL(K,I) = WVEL(K,I) + (DELP - WDOT(K,I))*GDT
            WDOT(K,I)   = DELP 
            DPTU = DPTL
          END DO
        END DO

      END DO TIME_LOOP

C-----------------------------------------------------------------------
C     offload working variables
C-----------------------------------------------------------------------
      DO I = IAH , IEH
        T(I,J,:,NE)    = TEMP(:,I)
        DWDT(I,J,:,NE) = WDOT(:,I)
        PINT(I,J,:,NE) = PRES(:,I)
        W(I,J,:,NE)    = WVEL(:,I)
      END DO

      END DO J_LOOP

      END SUBROUTINE FINAL
